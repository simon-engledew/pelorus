digraph "map_<%= map.id %>" {
  compound=true;
  truecolor=true;
  rankdir=BT;
  graph [truecolor bgcolor="transparent"];
  node [shape=box];
  ranksep=0.2;
  pad=0.25;
  node [
    fontname="Helvetica",
    fontsize="10",
    penwidth="2",
    style="filled",
  ];
  URL="<%= polymorphic_url(map) %>";
  
  <%= render :partial => 'network_goal', :collection => map.children -%>

  <%- map.goals.each do |goal| -%>
    <%- goal.supporting_goals.each do |supporting_goal| -%>
      goal_<%= cluster_target(supporting_goal.supported_by).id %> -> goal_<%= cluster_target(supporting_goal.goal).id %> [
        style=<%= supporting_goal.supported_by.propagate ? 'solid' : 'dotted' %>,
        color="<%= line_color(supporting_goal.supported_by.status) %>",
        penwidth="2",
        <% if supporting_goal.supported_by.cluster? or supporting_goal.goal.cluster? %>
        minlen=2,
        <% end %>
        <% if supporting_goal.supported_by.cluster? %>ltail="cluster_<%= supporting_goal.supported_by.id %>",<% end %>
        <% if supporting_goal.goal.cluster? %>lhead="cluster_<%= supporting_goal.goal.id %>",<% end %>
      ];
    <%- end -%>
  <%- end -%>
  
  <%- map.goals.each do |goal| -%>
    <%- if goal.cluster? -%>
      <%- goal.children.inject(nil) do |previous_child, child| -%>
        <%- if previous_child -%>
          <%- unless previous_child.cluster? or child.cluster? or previous_child.supporting_goals.include?(child) or previous_child.supported_goals.include?(child) -%>
            goal_<%= previous_child.id %> -> goal_<%= child.id %> [
              dir="none",
              style="invis"
            ]
          <%- end -%>
        <%- end -%>
      <%- child; end -%>
    <%- end %>
  <%- end -%>
}
